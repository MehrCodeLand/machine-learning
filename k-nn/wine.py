# -*- coding: utf-8 -*-
"""wine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e2LmnJegjzskBmQ0JWNtSn3WKsJCSAEh
"""


"""0. Wine Quality Dataset 🍷
Dataset Link: Wine Quality on UCI
Description: Classify wine samples based on chemical properties.


Features (11): Acidity, alcohol %, density, pH, etc.
Labels (2): Red wine 🍷 or White wine 🍾.
📌 Question:
Train a K-NN classifier to predict wine type (red or white).
Optimize k value with GridSearchCV.
Compare results using different normalization techniques (StandardScaler vs MinMaxScaler).
📌 Expected from you:

Preprocess the data and handle missing values.
Find the best k value and metric.
Report precision, recall, and confusion matrix.
"""

import pandas as pd
import numpy as np
import seaborn as sns

df = wine_quality_df = pd.read_csv('/content/WineQT.csv')

df.head()

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler , LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report , confusion_matrix , accuracy_score

import matplotlib.pyplot as plt

df['quality'] = df['quality'].apply(lambda x: 1 if x >= 6 else 0)

sns.heatmap(df.drop(['quality' , 'Id'], axis=1).corr(), cmap='coolwarm', annot=False)
plt.title("Feature Correlation Heatmap")
plt.show()

X = df.drop(['quality' , 'Id'] , axis = 1)
y = df['quality']

X_train , X_test , y_train , y_test = train_test_split(X , y , test_size=0.2 , random_state=42)

pipeline = Pipeline([
    ('scaler' , StandardScaler()),
    ('knn' , KNeighborsClassifier())
])

param_grid = {
    'knn__n_neighbors': list(range(1,31)),
    'knn__metric': ['euclidean' , 'manhattan' , 'minkowski']
}

grid_search = GridSearchCV(pipeline , param_grid , cv=5 , scoring='accuracy' , n_jobs=1 )
grid_search.fit(X_train , y_train)

# Best parameters and best score
print("Best Parameters:", grid_search.best_params_)
print("Best Cross-Validation Score:", grid_search.best_score_)

y_pred = grid_search.best_estimator_.predict(X_test)

# Print accuracy and classification report
print("Test Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

